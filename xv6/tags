!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
.bss	kernel.ld	/^	.bss : {$/;"	S
.data	kernel.ld	/^	.data : {$/;"	S
.gdbinit	Makefile	/^.gdbinit: .gdbinit.tmpl$/;"	t
.rodata	kernel.ld	/^	.rodata : {$/;"	S
.stab	kernel.ld	/^	.stab : {$/;"	S
.stabstr	kernel.ld	/^	.stabstr : {$/;"	S
.text	kernel.ld	/^	.text : AT(0x100000) {$/;"	S
ALT	kbd.h	/^#define ALT /;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	/^  #define ASSERT /;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	typeref:typename:long	file:
BACK	sh.c	/^#define BACK /;"	d	file:
BACKSPACE	console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	fs.h	/^#define BBLOCK(/;"	d
BCAST	lapic.c	/^  #define BCAST /;"	d	file:
BIG	usertests.c	/^#define BIG /;"	d	file:
BPB	fs.h	/^#define BPB /;"	d
BSIZE	fs.h	/^#define BSIZE /;"	d
BUSY	lapic.c	/^  #define BUSY /;"	d	file:
B_DIRTY	buf.h	/^#define B_DIRTY /;"	d
B_VALID	buf.h	/^#define B_VALID /;"	d
C	console.c	/^#define C(/;"	d	file:
C	kbd.h	/^#define C(/;"	d
CAPSLOCK	kbd.h	/^#define CAPSLOCK /;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Og -Wall -MD -ggdb -m32 -Werror -fn/;"	m
CMOS_PORT	lapic.c	/^#define CMOS_PORT /;"	d	file:
CMOS_RETURN	lapic.c	/^#define CMOS_RETURN /;"	d	file:
CMOS_STATA	lapic.c	/^#define CMOS_STATA /;"	d	file:
CMOS_STATB	lapic.c	/^#define CMOS_STATB /;"	d	file:
CMOS_UIP	lapic.c	/^#define CMOS_UIP /;"	d	file:
COM1	uart.c	/^#define COM1 /;"	d	file:
CONSOLE	file.h	/^#define CONSOLE /;"	d
CONV	lapic.c	/^#define    CONV(/;"	d	file:
CPUS	Makefile	/^CPUS := 1$/;"	m
CR0_PE	mmu.h	/^#define CR0_PE /;"	d
CR0_PG	mmu.h	/^#define CR0_PG /;"	d
CR0_WP	mmu.h	/^#define CR0_WP /;"	d
CR4_PSE	mmu.h	/^#define CR4_PSE /;"	d
CRTPORT	console.c	/^#define CRTPORT /;"	d	file:
CTL	kbd.h	/^#define CTL /;"	d
DAY	lapic.c	/^#define DAY /;"	d	file:
DEASSERT	lapic.c	/^  #define DEASSERT /;"	d	file:
DELIVS	lapic.c	/^  #define DELIVS /;"	d	file:
DEVSPACE	memlayout.h	/^#define DEVSPACE /;"	d
DIRSIZ	fs.h	/^#define DIRSIZ /;"	d
DPL_USER	mmu.h	/^#define DPL_USER /;"	d
E0ESC	kbd.h	/^#define E0ESC /;"	d
ELF_MAGIC	elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	elf.h	/^#define ELF_PROG_LOAD /;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	/^  #define ENABLE /;"	d	file:
EOI	lapic.c	/^#define EOI /;"	d	file:
ERROR	lapic.c	/^#define ERROR /;"	d	file:
ESR	lapic.c	/^#define ESR /;"	d	file:
EXEC	sh.c	/^#define EXEC /;"	d	file:
EXTMEM	memlayout.h	/^#define EXTMEM /;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	/^  #define FIXED /;"	d	file:
FL_IF	mmu.h	/^#define FL_IF /;"	d
FSSIZE	param.h	/^#define FSSIZE /;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	/^#define HOURS /;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	/^#define IBLOCK(/;"	d
ICRHI	lapic.c	/^#define ICRHI /;"	d	file:
ICRLO	lapic.c	/^#define ICRLO /;"	d	file:
ID	lapic.c	/^#define ID /;"	d	file:
IDE_BSY	ide.c	/^#define IDE_BSY /;"	d	file:
IDE_CMD_RDMUL	ide.c	/^#define IDE_CMD_RDMUL /;"	d	file:
IDE_CMD_READ	ide.c	/^#define IDE_CMD_READ /;"	d	file:
IDE_CMD_WRITE	ide.c	/^#define IDE_CMD_WRITE /;"	d	file:
IDE_CMD_WRMUL	ide.c	/^#define IDE_CMD_WRMUL /;"	d	file:
IDE_DF	ide.c	/^#define IDE_DF /;"	d	file:
IDE_DRDY	ide.c	/^#define IDE_DRDY /;"	d	file:
IDE_ERR	ide.c	/^#define IDE_ERR /;"	d	file:
INIT	lapic.c	/^  #define INIT /;"	d	file:
INPUT_BUF	console.c	/^#define INPUT_BUF /;"	d	file:
INT_ACTIVELOW	ioapic.c	/^#define INT_ACTIVELOW /;"	d	file:
INT_DISABLED	ioapic.c	/^#define INT_DISABLED /;"	d	file:
INT_LEVEL	ioapic.c	/^#define INT_LEVEL /;"	d	file:
INT_LOGICAL	ioapic.c	/^#define INT_LOGICAL /;"	d	file:
IOAPIC	ioapic.c	/^#define IOAPIC /;"	d	file:
IO_PIC1	picirq.c	/^#define IO_PIC1 /;"	d	file:
IO_PIC2	picirq.c	/^#define IO_PIC2 /;"	d	file:
IPB	fs.h	/^#define IPB /;"	d
IRQ_COM1	traps.h	/^#define IRQ_COM1 /;"	d
IRQ_ERROR	traps.h	/^#define IRQ_ERROR /;"	d
IRQ_IDE	traps.h	/^#define IRQ_IDE /;"	d
IRQ_KBD	traps.h	/^#define IRQ_KBD /;"	d
IRQ_SPURIOUS	traps.h	/^#define IRQ_SPURIOUS /;"	d
IRQ_TIMER	traps.h	/^#define IRQ_TIMER /;"	d
KBDATAP	kbd.h	/^#define KBDATAP /;"	d
KBSTATP	kbd.h	/^#define KBSTATP /;"	d
KBS_DIB	kbd.h	/^#define KBS_DIB /;"	d
KERNBASE	memlayout.h	/^#define KERNBASE /;"	d
KERNLINK	memlayout.h	/^#define KERNLINK /;"	d
KEY_DEL	kbd.h	/^#define KEY_DEL /;"	d
KEY_DN	kbd.h	/^#define KEY_DN /;"	d
KEY_END	kbd.h	/^#define KEY_END /;"	d
KEY_HOME	kbd.h	/^#define KEY_HOME /;"	d
KEY_INS	kbd.h	/^#define KEY_INS /;"	d
KEY_LF	kbd.h	/^#define KEY_LF /;"	d
KEY_PGDN	kbd.h	/^#define KEY_PGDN /;"	d
KEY_PGUP	kbd.h	/^#define KEY_PGUP /;"	d
KEY_RT	kbd.h	/^#define KEY_RT /;"	d
KEY_UP	kbd.h	/^#define KEY_UP /;"	d
KSTACKSIZE	param.h	/^#define KSTACKSIZE /;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	/^  #define LEVEL /;"	d	file:
LINT0	lapic.c	/^#define LINT0 /;"	d	file:
LINT1	lapic.c	/^#define LINT1 /;"	d	file:
LIST	sh.c	/^#define LIST /;"	d	file:
LOGSIZE	param.h	/^#define LOGSIZE /;"	d
MASKED	lapic.c	/^  #define MASKED /;"	d	file:
MAXARG	param.h	/^#define MAXARG /;"	d
MAXARGS	sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	fs.h	/^#define MAXFILE /;"	d
MAXOPBLOCKS	param.h	/^#define MAXOPBLOCKS /;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	/^#define MINS /;"	d	file:
MONTH	lapic.c	/^#define MONTH /;"	d	file:
MPBOOT	mp.h	/^    #define MPBOOT /;"	d
MPBUS	mp.h	/^#define MPBUS /;"	d
MPIOAPIC	mp.h	/^#define MPIOAPIC /;"	d
MPIOINTR	mp.h	/^#define MPIOINTR /;"	d
MPLINTR	mp.h	/^#define MPLINTR /;"	d
MPPROC	mp.h	/^#define MPPROC /;"	d
N	forktest.c	/^#define N /;"	d	file:
N	usertests.c	/^  enum { N = 20 };$/;"	e	enum:createdelete::__anonaf504e680103	file:
NBUF	param.h	/^#define NBUF /;"	d
NCPU	param.h	/^#define NCPU /;"	d
NDEV	param.h	/^#define NDEV /;"	d
NDIRECT	fs.h	/^#define NDIRECT /;"	d
NELEM	defs.h	/^#define NELEM(/;"	d
NFILE	param.h	/^#define NFILE /;"	d
NINDIRECT	fs.h	/^#define NINDIRECT /;"	d
NINODE	param.h	/^#define NINODE /;"	d
NINODES	mkfs.c	/^#define NINODES /;"	d	file:
NO	kbd.h	/^#define NO /;"	d
NOFILE	param.h	/^#define NOFILE /;"	d
NPDENTRIES	mmu.h	/^#define NPDENTRIES /;"	d
NPROC	param.h	/^#define NPROC /;"	d
NPTENTRIES	mmu.h	/^#define NPTENTRIES /;"	d
NSEGS	mmu.h	/^#define NSEGS /;"	d
NUMLOCK	kbd.h	/^#define NUMLOCK /;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	/^#define O_CREATE /;"	d
O_RDONLY	fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	fcntl.h	/^#define O_RDWR /;"	d
O_WRONLY	fcntl.h	/^#define O_WRONLY /;"	d
P2V	memlayout.h	/^#define P2V(/;"	d
P2V_WO	memlayout.h	/^#define P2V_WO(/;"	d
PCINT	lapic.c	/^#define PCINT /;"	d	file:
PDX	mmu.h	/^#define PDX(/;"	d
PDXSHIFT	mmu.h	/^#define PDXSHIFT /;"	d
PERIODIC	lapic.c	/^  #define PERIODIC /;"	d	file:
PGADDR	mmu.h	/^#define PGADDR(/;"	d
PGROUNDDOWN	mmu.h	/^#define PGROUNDDOWN(/;"	d
PGROUNDUP	mmu.h	/^#define PGROUNDUP(/;"	d
PGSIZE	mmu.h	/^#define PGSIZE /;"	d
PHYSTOP	memlayout.h	/^#define PHYSTOP /;"	d
PIPE	sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	pipe.c	/^#define PIPESIZE /;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	/^#define PTE_ADDR(/;"	d
PTE_FLAGS	mmu.h	/^#define PTE_FLAGS(/;"	d
PTE_P	mmu.h	/^#define PTE_P /;"	d
PTE_PS	mmu.h	/^#define PTE_PS /;"	d
PTE_U	mmu.h	/^#define PTE_U /;"	d
PTE_W	mmu.h	/^#define PTE_W /;"	d
PTX	mmu.h	/^#define PTX(/;"	d
PTXSHIFT	mmu.h	/^#define PTXSHIFT /;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=di/;"	m
REDIR	sh.c	/^#define REDIR /;"	d	file:
REG_ID	ioapic.c	/^#define REG_ID /;"	d	file:
REG_TABLE	ioapic.c	/^#define REG_TABLE /;"	d	file:
REG_VER	ioapic.c	/^#define REG_VER /;"	d	file:
ROOTDEV	param.h	/^#define ROOTDEV /;"	d
ROOTINO	fs.h	/^#define ROOTINO /;"	d
RTC_ADDR	usertests.c	/^  #define RTC_ADDR /;"	d	file:
RTC_DATA	usertests.c	/^  #define RTC_DATA /;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	/^#define SCROLLLOCK /;"	d
SECS	lapic.c	/^#define SECS /;"	d	file:
SECTOR_SIZE	ide.c	/^#define SECTOR_SIZE /;"	d	file:
SECTSIZE	bootmain.c	/^#define SECTSIZE /;"	d	file:
SEG	mmu.h	/^#define SEG(/;"	d
SEG16	mmu.h	/^#define SEG16(/;"	d
SEG_ASM	asm.h	/^#define SEG_ASM(/;"	d
SEG_KCODE	mmu.h	/^#define SEG_KCODE /;"	d
SEG_KDATA	mmu.h	/^#define SEG_KDATA /;"	d
SEG_NULLASM	asm.h	/^#define SEG_NULLASM /;"	d
SEG_TSS	mmu.h	/^#define SEG_TSS /;"	d
SEG_UCODE	mmu.h	/^#define SEG_UCODE /;"	d
SEG_UDATA	mmu.h	/^#define SEG_UDATA /;"	d
SETGATE	mmu.h	/^#define SETGATE(/;"	d
SHIFT	kbd.h	/^#define SHIFT /;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	/^  #define STARTUP /;"	d	file:
STA_R	asm.h	/^#define STA_R /;"	d
STA_R	mmu.h	/^#define STA_R /;"	d
STA_W	asm.h	/^#define STA_W /;"	d
STA_W	mmu.h	/^#define STA_W /;"	d
STA_X	asm.h	/^#define STA_X /;"	d
STA_X	mmu.h	/^#define STA_X /;"	d
STS_IG32	mmu.h	/^#define STS_IG32 /;"	d
STS_T32A	mmu.h	/^#define STS_T32A /;"	d
STS_TG32	mmu.h	/^#define STS_TG32 /;"	d
SVR	lapic.c	/^#define SVR /;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(/;"	d	file:
SYS_chdir	syscall.h	/^#define SYS_chdir /;"	d
SYS_close	syscall.h	/^#define SYS_close /;"	d
SYS_dup	syscall.h	/^#define SYS_dup /;"	d
SYS_exec	syscall.h	/^#define SYS_exec /;"	d
SYS_exit	syscall.h	/^#define SYS_exit /;"	d
SYS_fork	syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	syscall.h	/^#define SYS_fstat /;"	d
SYS_getpid	syscall.h	/^#define SYS_getpid /;"	d
SYS_kill	syscall.h	/^#define SYS_kill /;"	d
SYS_link	syscall.h	/^#define SYS_link /;"	d
SYS_mkdir	syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	syscall.h	/^#define SYS_mknod /;"	d
SYS_open	syscall.h	/^#define SYS_open /;"	d
SYS_pipe	syscall.h	/^#define SYS_pipe /;"	d
SYS_read	syscall.h	/^#define SYS_read /;"	d
SYS_sbrk	syscall.h	/^#define SYS_sbrk /;"	d
SYS_sleep	syscall.h	/^#define SYS_sleep /;"	d
SYS_unlink	syscall.h	/^#define SYS_unlink /;"	d
SYS_uptime	syscall.h	/^#define SYS_uptime /;"	d
SYS_wait	syscall.h	/^#define SYS_wait /;"	d
SYS_write	syscall.h	/^#define SYS_write /;"	d
TCCR	lapic.c	/^#define TCCR /;"	d	file:
TDCR	lapic.c	/^#define TDCR /;"	d	file:
TICR	lapic.c	/^#define TICR /;"	d	file:
TIMER	lapic.c	/^#define TIMER /;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; /;"	m
TPR	lapic.c	/^#define TPR /;"	d	file:
T_ALIGN	traps.h	/^#define T_ALIGN /;"	d
T_BOUND	traps.h	/^#define T_BOUND /;"	d
T_BRKPT	traps.h	/^#define T_BRKPT /;"	d
T_DBLFLT	traps.h	/^#define T_DBLFLT /;"	d
T_DEBUG	traps.h	/^#define T_DEBUG /;"	d
T_DEFAULT	traps.h	/^#define T_DEFAULT /;"	d
T_DEV	stat.h	/^#define T_DEV /;"	d
T_DEVICE	traps.h	/^#define T_DEVICE /;"	d
T_DIR	stat.h	/^#define T_DIR /;"	d
T_DIVIDE	traps.h	/^#define T_DIVIDE /;"	d
T_FILE	stat.h	/^#define T_FILE /;"	d
T_FPERR	traps.h	/^#define T_FPERR /;"	d
T_GPFLT	traps.h	/^#define T_GPFLT /;"	d
T_ILLOP	traps.h	/^#define T_ILLOP /;"	d
T_IRQ0	traps.h	/^#define T_IRQ0 /;"	d
T_MCHK	traps.h	/^#define T_MCHK /;"	d
T_NMI	traps.h	/^#define T_NMI /;"	d
T_OFLOW	traps.h	/^#define T_OFLOW /;"	d
T_PGFLT	traps.h	/^#define T_PGFLT /;"	d
T_SEGNP	traps.h	/^#define T_SEGNP /;"	d
T_SIMDERR	traps.h	/^#define T_SIMDERR /;"	d
T_STACK	traps.h	/^#define T_STACK /;"	d
T_SYSCALL	traps.h	/^#define T_SYSCALL /;"	d
T_TSS	traps.h	/^#define T_TSS /;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	/^#define V2P(/;"	d
V2P_WO	memlayout.h	/^#define V2P_WO(/;"	d
VER	lapic.c	/^#define VER /;"	d	file:
X1	lapic.c	/^  #define X1 /;"	d	file:
YEAR	lapic.c	/^#define YEAR /;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_%	Makefile	/^_%: %.o $(ULIB)$/;"	t
__STABSTR_BEGIN__	kernel.ld	/^		PROVIDE(__STABSTR_BEGIN__ = .);$/;"	s	section:.stabstr	assignment:provide
__STABSTR_END__	kernel.ld	/^		PROVIDE(__STABSTR_END__ = .);$/;"	s	section:.stabstr	assignment:provide
__STAB_BEGIN__	kernel.ld	/^		PROVIDE(__STAB_BEGIN__ = .);$/;"	s	section:.stab	assignment:provide
__STAB_END__	kernel.ld	/^		PROVIDE(__STAB_END__ = .);$/;"	s	section:.stab	assignment:provide
__anon0f27d3d00108	bio.c	/^struct {$/;"	s	file:
__anon156e3e2a0108	proc.c	/^struct {$/;"	s	file:
__anon69d64d0c0108	kalloc.c	/^struct {$/;"	s	file:
__anon7c96edaf0108	fs.c	/^struct {$/;"	s	file:
__anon96a473a90108	console.c	/^static struct {$/;"	s	file:
__anon96a473a90208	console.c	/^struct {$/;"	s	file:
__anonaf504e680103	usertests.c	/^  enum { N = 20 };$/;"	g	function:createdelete	file:
__anonaf504e680208	usertests.c	/^  struct {$/;"	s	function:concreate	file:
__anonf5a2dce30108	umalloc.c	/^  struct {$/;"	s	union:header	file:
__anonfd762eb60108	file.c	/^struct {$/;"	s	file:
__anonfd762ebb0103	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	g	struct:file
_forktest	Makefile	/^_forktest: forktest.o $(ULIB)$/;"	t
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f	typeref:typename:void
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	typeref:typename:uint *
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode	typeref:typename:uint[]
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode	typeref:typename:uint[]
align	elf.h	/^  uint align;$/;"	m	struct:proghdr	typeref:typename:uint
allocproc	proc.c	/^allocproc(void)$/;"	f	typeref:struct:proc *	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
alltraps	trapasm.S	/^alltraps:$/;"	l
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	typeref:typename:uchar
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu	typeref:typename:uchar
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	typeref:typename:uchar
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	typeref:typename:int	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f	typeref:typename:int
argptest	usertests.c	/^void argptest()$/;"	f	typeref:typename:void
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f	typeref:typename:int
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	typeref:typename:uint:5
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f	typeref:typename:int
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v	typeref:typename:char * []
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f	typeref:typename:int
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	typeref:typename:uint:1
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	typeref:struct:cmd *
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
balloc	fs.c	/^balloc(uint dev)$/;"	f	typeref:typename:uint	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f	typeref:typename:void
base	umalloc.c	/^static Header base;$/;"	v	typeref:typename:Header	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:16
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon0f27d3d00108
begin_op	log.c	/^begin_op(void)$/;"	f	typeref:typename:void
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	typeref:typename:void	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	typeref:struct:buf *	file:
bigargtest	usertests.c	/^bigargtest(void)$/;"	f	typeref:typename:void
bigdir	usertests.c	/^bigdir(void)$/;"	f	typeref:typename:void
bigfile	usertests.c	/^bigfile(void)$/;"	f	typeref:typename:void
bigwrite	usertests.c	/^bigwrite(void)$/;"	f	typeref:typename:void
binit	bio.c	/^binit(void)$/;"	f	typeref:typename:void
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	typeref:typename:int[]	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf	typeref:typename:uint
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	typeref:typename:uint	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock	typeref:typename:uint
bochs	Makefile	/^bochs : fs.img xv6.img$/;"	t
bootblock	Makefile	/^bootblock: bootasm.S bootmain.c$/;"	t
bootmain	bootmain.c	/^bootmain(void)$/;"	f	typeref:typename:void
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f	typeref:struct:buf *
brelse	bio.c	/^brelse(struct buf *b)$/;"	f	typeref:typename:void
bsstest	usertests.c	/^bsstest(void)$/;"	f	typeref:typename:void
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf[]	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon96a473a90208	typeref:typename:char[]	file:
buf	grep.c	/^char buf[1024];$/;"	v	typeref:typename:char[1024]
buf	usertests.c	/^char buf[8192];$/;"	v	typeref:typename:char[8192]
buf	wc.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f	typeref:typename:void
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	typeref:typename:void	file:
cat	cat.c	/^cat(int fd)$/;"	f	typeref:typename:void
cgaputc	console.c	/^cgaputc(int c)$/;"	f	typeref:typename:void	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	typeref:typename:void *
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	typeref:typename:uchar
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	typeref:typename:uchar
clean	Makefile	/^clean: $/;"	t
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:void
cli	x86.h	/^cli(void)$/;"	f	typeref:typename:void
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:cmd *	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:cmd *	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	typeref:typename:uint	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f	typeref:typename:void
commit	log.c	/^commit()$/;"	f	typeref:typename:void	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	typeref:typename:int	file:
concreate	usertests.c	/^concreate(void)$/;"	f	typeref:typename:void
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon96a473a90108
consoleinit	console.c	/^consoleinit(void)$/;"	f	typeref:typename:void
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f	typeref:typename:void
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f	typeref:typename:int
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f	typeref:typename:int
consputc	console.c	/^consputc(int c)$/;"	f	typeref:typename:void
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:context *
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f	typeref:typename:int
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f	typeref:typename:pde_t *
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f	typeref:typename:void
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:cpu *
cpuid	proc.c	/^cpuid() {$/;"	f	typeref:typename:int
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu[]
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	typeref:typename:void *
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	typeref:struct:inode *	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f	typeref:typename:void
createtest	usertests.c	/^createtest(void)$/;"	f	typeref:typename:void
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	typeref:typename:ushort *	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc	typeref:typename:uint:16
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	typeref:typename:ushort
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	typeref:typename:ushort
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v	typeref:typename:uchar[256]
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:inode *
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf	typeref:typename:uchar[]
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	typeref:typename:uint	file:
data	kernel.ld	/^	PROVIDE(data = .);$/;"	s	assignment:provide
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	typeref:typename:char[]	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate	typeref:typename:uint
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	typeref:typename:uint:1
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
dev	buf.h	/^  uint dev;$/;"	m	struct:buf	typeref:typename:uint
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	typeref:typename:uint
dev	log.c	/^  int dev;$/;"	m	struct:log	typeref:typename:int	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat	typeref:typename:int
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw[]
devsw	file.h	/^struct devsw {$/;"	s
dinode	fs.h	/^struct dinode {$/;"	s
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f	typeref:typename:void
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f	typeref:typename:int
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	typeref:struct:inode *
dirtest	usertests.c	/^void dirtest(void)$/;"	f	typeref:typename:void
disksize	memide.c	/^static int disksize;$/;"	v	typeref:typename:int	file:
dist	Makefile	/^dist:$/;"	t
dist-test	Makefile	/^dist-test:$/;"	t
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	typeref:typename:uint:2
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	typeref:typename:uint:2
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	typeref:typename:ushort
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	typeref:typename:ushort
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	typeref:typename:uint
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	typeref:typename:uint
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	typeref:typename:uint *
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context	typeref:typename:uint
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	typeref:typename:uint
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	typeref:typename:uint
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context	typeref:typename:uint
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	typeref:typename:uint
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v	typeref:typename:char * []
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	typeref:typename:uint
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	typeref:typename:uint
edata	kernel.ld	/^	PROVIDE(edata = .);$/;"	s	assignment:provide
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	typeref:typename:uint
edi	proc.h	/^  uint edi;$/;"	m	struct:context	typeref:typename:uint
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	typeref:typename:uint
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	typeref:typename:uint
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	typeref:typename:uint
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	typeref:typename:char *	file:
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	typeref:typename:uint
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	typeref:typename:uint
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	typeref:typename:uint *
eip	proc.h	/^  uint eip;$/;"	m	struct:context	typeref:typename:uint
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	typeref:typename:uint
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	typeref:typename:uchar[12]
elfhdr	elf.h	/^struct elfhdr {$/;"	s
end	kernel.ld	/^	PROVIDE(end = .);$/;"	s	assignment:provide
end_op	log.c	/^end_op(void)$/;"	f	typeref:typename:void
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	typeref:typename:uint
entry	entry.S	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	typeref:typename:ushort
entryother	Makefile	/^entryother: entryother.S$/;"	t
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v	typeref:typename:pde_t[]
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v	typeref:typename:pde_t[]
err	x86.h	/^  uint err;$/;"	m	struct:trapframe	typeref:typename:uint
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	typeref:typename:ushort
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	typeref:typename:ushort
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	typeref:typename:uint
esi	proc.h	/^  uint esi;$/;"	m	struct:context	typeref:typename:uint
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	typeref:typename:uint
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	typeref:typename:uint *
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	typeref:typename:uint
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	typeref:typename:uint
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	typeref:typename:uint *
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	typeref:typename:uint *
etext	kernel.ld	/^	PROVIDE(etext = .);	\/* Define the 'etext' symbol to this value *\/$/;"	s	assignment:provide
even	runoff.spec	/^even: bootasm.S   # mild preference$/;"	t
even	runoff.spec	/^even: bootmain.c  # mild preference$/;"	t
even	runoff.spec	/^even: console.c$/;"	t
even	runoff.spec	/^even: entry.S  # mild preference$/;"	t
even	runoff.spec	/^even: entryother.S  # mild preference$/;"	t
even	runoff.spec	/^even: ide.c$/;"	t
even	runoff.spec	/^even: kalloc.c  # mild preference$/;"	t
even	runoff.spec	/^even: kbd.h$/;"	t
even	runoff.spec	/^even: log.c$/;"	t
even	runoff.spec	/^even: main.c$/;"	t
even	runoff.spec	/^even: mp.c$/;"	t
even	runoff.spec	/^even: proc.c   # VERY important$/;"	t
even	runoff.spec	/^even: proc.h$/;"	t
even	runoff.spec	/^even: spinlock.h$/;"	t
exec	exec.c	/^exec(char *path, char **argv)$/;"	f	typeref:typename:int
execcmd	sh.c	/^execcmd(void)$/;"	f	typeref:struct:cmd *
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f	typeref:typename:void
exit	initcode.S	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f	typeref:typename:void
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f	typeref:typename:void
exitwait	usertests.c	/^exitwait(void)$/;"	f	typeref:typename:void
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	typeref:typename:int	file:
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	typeref:typename:int	file:
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	typeref:typename:uint
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f	typeref:typename:int
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f	typeref:typename:int
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anonfd762eb60108	typeref:struct:file[]	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	typeref:typename:char *	file:
filealloc	file.c	/^filealloc(void)$/;"	f	typeref:struct:file *
fileclose	file.c	/^fileclose(struct file *f)$/;"	f	typeref:typename:void
filedup	file.c	/^filedup(struct file *f)$/;"	f	typeref:struct:file *
fileinit	file.c	/^fileinit(void)$/;"	f	typeref:typename:void
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f	typeref:typename:int
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	typeref:typename:uint
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	typeref:typename:void	file:
flags	buf.h	/^  int flags;$/;"	m	struct:buf	typeref:typename:int
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	typeref:typename:uint
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	typeref:typename:uint
flags	entry.S	/^  #define flags /;"	d	file:
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	typeref:typename:uchar
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	typeref:typename:uchar
fmtname	ls.c	/^fmtname(char *path)$/;"	f	typeref:typename:char *
fork	proc.c	/^fork(void)$/;"	f	typeref:typename:int
fork1	sh.c	/^fork1(void)$/;"	f	typeref:typename:int
forkret	proc.c	/^forkret(void)$/;"	f	typeref:typename:void
forktest	forktest.c	/^forktest(void)$/;"	f	typeref:typename:void
forktest	usertests.c	/^forktest(void)$/;"	f	typeref:typename:void
fourfiles	usertests.c	/^fourfiles(void)$/;"	f	typeref:typename:void
fourteen	usertests.c	/^fourteen(void)$/;"	f	typeref:typename:void
free	umalloc.c	/^free(void *ap)$/;"	f	typeref:typename:void
freeblock	mkfs.c	/^uint freeblock;$/;"	v	typeref:typename:uint
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v	typeref:typename:uint
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:run *	file:
freep	umalloc.c	/^static Header *freep;$/;"	v	typeref:typename:Header *	file:
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f	typeref:typename:void
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f	typeref:typename:void
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	typeref:typename:ushort
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe	typeref:typename:ushort
fs.img	Makefile	/^fs.img: mkfs README $(UPROGS)$/;"	t
fsfd	mkfs.c	/^int fsfd;$/;"	v	typeref:typename:int
fsfull	usertests.c	/^fsfull()$/;"	f	typeref:typename:void
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anonfd762eb60108
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	typeref:typename:uint:1
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:segdesc[]
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f	typeref:typename:void
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	typeref:typename:int
gets	ulib.c	/^gets(char *buf, int max)$/;"	f	typeref:typename:char *
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	typeref:typename:int
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f	typeref:typename:void
growproc	proc.c	/^growproc(int n)$/;"	f	typeref:typename:int
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	typeref:typename:ushort
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe	typeref:typename:ushort
havedisk1	ide.c	/^static int havedisk1;$/;"	v	typeref:typename:int	file:
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f	typeref:typename:int
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f	typeref:typename:int
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate	typeref:typename:uint
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f	typeref:struct:inode *
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f	typeref:typename:uint
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	typeref:typename:void
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon7c96edaf0108
ideinit	ide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideinit	memide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideintr	ide.c	/^ideintr(void)$/;"	f	typeref:typename:void
ideintr	memide.c	/^ideintr(void)$/;"	f	typeref:typename:void
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf *	file:
iderw	ide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
iderw	memide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	typeref:typename:void	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	typeref:typename:int	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc[256]
idtinit	trap.c	/^idtinit(void)$/;"	f	typeref:typename:void
idup	fs.c	/^idup(struct inode *ip)$/;"	f	typeref:struct:inode *
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	typeref:struct:inode *	file:
iinit	fs.c	/^iinit(int dev)$/;"	f	typeref:typename:void
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f	typeref:typename:void
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	typeref:typename:uchar
inb	x86.h	/^inb(ushort port)$/;"	f	typeref:typename:uchar
init	initcode.S	/^init:$/;"	l
initcode	Makefile	/^initcode: initcode.S$/;"	t
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f	typeref:typename:void
initlog	log.c	/^initlog(int dev)$/;"	f	typeref:typename:void
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc *	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f	typeref:typename:void
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f	typeref:typename:void
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat	typeref:typename:uint
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon7c96edaf0108	typeref:struct:inode[]	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock	typeref:typename:uint
input	console.c	/^} input;$/;"	v	typeref:struct:__anon96a473a90208
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	typeref:typename:void
install_trans	log.c	/^install_trans(void)$/;"	f	typeref:typename:void	file:
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu	typeref:typename:int
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	typeref:typename:uint
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	typeref:typename:ushort
inum	usertests.c	/^    ushort inum;$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:ushort	file:
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:typename:volatile struct ioapic *
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f	typeref:typename:void
ioapicid	mp.c	/^uchar ioapicid;$/;"	v	typeref:typename:uchar
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f	typeref:typename:void
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	typeref:typename:uint	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	typeref:typename:void	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	typeref:typename:ushort
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:inode *
iput	fs.c	/^iput(struct inode *ip)$/;"	f	typeref:typename:void
iputtest	usertests.c	/^iputtest(void)$/;"	f	typeref:typename:void
iref	usertests.c	/^iref(void)$/;"	f	typeref:typename:void
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	typeref:typename:int	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	typeref:typename:void	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f	typeref:typename:void
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f	typeref:typename:void
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f	typeref:typename:void
kalloc	kalloc.c	/^kalloc(void)$/;"	f	typeref:typename:char *
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f	typeref:typename:int
kbdintr	kbd.c	/^kbdintr(void)$/;"	f	typeref:typename:void
kernel	Makefile	/^kernel: $(OBJS) entry.o entryother initcode kernel.ld$/;"	t
kernelmemfs	Makefile	/^kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img$/;"	t
kfree	kalloc.c	/^kfree(char *v)$/;"	f	typeref:typename:void
kill	proc.c	/^kill(int pid)$/;"	f	typeref:typename:int
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc	typeref:typename:int
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f	typeref:typename:void
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f	typeref:typename:void
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap[]
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon69d64d0c0108
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v	typeref:typename:pde_t *
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	typeref:typename:char *
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f	typeref:typename:void
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v	typeref:typename:volatile uint *
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	typeref:typename:uint *
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f	typeref:typename:void
lapicid	lapic.c	/^lapicid(void)$/;"	f	typeref:typename:int
lapicinit	lapic.c	/^lapicinit(void)$/;"	f	typeref:typename:void
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f	typeref:typename:void
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	typeref:typename:void	file:
lcr3	x86.h	/^lcr3(uint val)$/;"	f	typeref:typename:void
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	typeref:typename:ushort
left	runoff.spec	/^left: fs.c  # mild preference$/;"	t
left	runoff.spec	/^left: log.c$/;"	t
left	runoff.spec	/^left: mp.c$/;"	t
left	runoff.spec	/^left: proc.h$/;"	t
left	runoff.spec	/^left: spinlock.h$/;"	t
left	runoff.spec	/^left: vm.c$/;"	t
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	typeref:typename:uchar
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	typeref:typename:ushort
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f	typeref:typename:void
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f	typeref:typename:void
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:16
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:4
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	typeref:typename:uint
linktest	usertests.c	/^linktest(void)$/;"	f	typeref:typename:void
linkunlink	usertests.c	/^linkunlink()$/;"	f	typeref:typename:void
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f	typeref:typename:void
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f	typeref:typename:int
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon96a473a90108	typeref:struct:spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anonfd762eb60108	typeref:struct:spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon7c96edaf0108	typeref:struct:spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon156e3e2a0108	typeref:struct:spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock	typeref:typename:uint
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock	typeref:typename:uint
locking	console.c	/^  int locking;$/;"	m	struct:__anon96a473a90108	typeref:typename:int	file:
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f	typeref:typename:void
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock	typeref:typename:uint
ls	ls.c	/^ls(char *path)$/;"	f	typeref:typename:void
ltr	x86.h	/^ltr(ushort sel)$/;"	f	typeref:typename:void
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	typeref:typename:ushort
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	typeref:typename:uint
magic	entry.S	/^  #define magic /;"	d	file:
main	cat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	echo.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	forktest.c	/^main(void)$/;"	f	typeref:typename:int
main	grep.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	init.c	/^main(void)$/;"	f	typeref:typename:int
main	kill.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main	ln.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	ls.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	main.c	/^main(void)$/;"	f	typeref:typename:int
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	rm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	sh.c	/^main(void)$/;"	f	typeref:typename:int
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	usertests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	wc.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	zombie.c	/^main(void)$/;"	f	typeref:typename:int
major	file.h	/^  short major;$/;"	m	struct:inode	typeref:typename:short
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f	typeref:typename:void *
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	typeref:typename:int	file:
match	grep.c	/^match(char *re, char *text)$/;"	f	typeref:typename:int
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f	typeref:typename:int
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	typeref:typename:int
mem	usertests.c	/^mem(void)$/;"	f	typeref:typename:void
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	typeref:typename:int
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	typeref:typename:uchar *	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f	typeref:typename:void *
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	typeref:typename:uint
microdelay	lapic.c	/^microdelay(int us)$/;"	f	typeref:typename:void
min	fs.c	/^#define min(/;"	d	file:
min	mkfs.c	/^#define min(/;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode	typeref:typename:short
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate	typeref:typename:uint
mkfs	Makefile	/^mkfs: mkfs.c fs.h$/;"	t
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	typeref:typename:int	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate	typeref:typename:uint
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	typeref:typename:Header *	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	typeref:struct:mpconf *	file:
mpenter	main.c	/^mpenter(void)$/;"	f	typeref:typename:void	file:
mpinit	mp.c	/^mpinit(void)$/;"	f	typeref:typename:void
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	typeref:typename:void	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	typeref:struct:mp *	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	typeref:struct:mp *	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f	typeref:struct:cpu *
myproc	proc.c	/^myproc(void) {$/;"	f	typeref:struct:proc *
n	log.c	/^  int n;$/;"	m	struct:logheader	typeref:typename:int	file:
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	typeref:typename:char[]
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc	typeref:typename:char[16]
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock	typeref:typename:char *
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock	typeref:typename:char *
name	usertests.c	/^    char name[14];$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:char[14]	file:
name	usertests.c	/^char name[3];$/;"	v	typeref:typename:char[3]
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f	typeref:typename:int
namei	fs.c	/^namei(char *path)$/;"	f	typeref:struct:inode *
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f	typeref:struct:inode *
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	typeref:struct:inode *	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v	typeref:typename:int
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	typeref:typename:uint
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v	typeref:typename:int
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu	typeref:typename:int
ncpu	mp.c	/^int ncpu;$/;"	v	typeref:typename:int
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf *
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run *	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v	typeref:typename:int
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v	typeref:typename:int
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	typeref:typename:uint
nlink	file.h	/^  short nlink;$/;"	m	struct:inode	typeref:typename:short
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	typeref:typename:short
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	typeref:typename:short
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock	typeref:typename:uint
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v	typeref:typename:int
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v	typeref:typename:int
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v	typeref:typename:uchar[256]
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	typeref:typename:uint	file:
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	typeref:struct:cmd *
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	typeref:typename:uint	file:
odd	runoff.spec	/^odd: fs.c   # VERY important$/;"	t
odd	runoff.spec	/^odd: sh.c$/;"	t
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	typeref:typename:ushort
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	typeref:typename:uint *
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	typeref:typename:uint
off	elf.h	/^  uint off;$/;"	m	struct:proghdr	typeref:typename:uint
off	file.h	/^  uint off;$/;"	m	struct:file	typeref:typename:uint
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:file * []
openiputtest	usertests.c	/^openiputtest(void)$/;"	f	typeref:typename:void
opentest	usertests.c	/^opentest(void)$/;"	f	typeref:typename:void
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f	typeref:typename:void
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	typeref:typename:void
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	typeref:typename:int	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f	typeref:typename:void
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	typeref:typename:uint:1
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	typeref:typename:uint:1
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	typeref:typename:uint[3]	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	typeref:typename:ushort
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	typeref:typename:ushort
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	typeref:typename:ushort
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	typeref:typename:ushort
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	typeref:typename:ushort
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	typeref:typename:ushort
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	typeref:typename:ushort
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	typeref:typename:ushort
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe	typeref:typename:ushort
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	typeref:typename:ushort
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe	typeref:typename:ushort
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	typeref:typename:ushort
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	typeref:typename:ushort
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	typeref:typename:ushort
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr	typeref:typename:uint
panic	console.c	/^panic(char *s)$/;"	f	typeref:typename:void
panic	sh.c	/^panic(char *s)$/;"	f	typeref:typename:void
panicked	console.c	/^static int panicked = 0;$/;"	v	typeref:typename:int	file:
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc *
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f	typeref:struct:cmd *
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	typeref:struct:cmd *
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	typeref:typename:uint[10]
pde_t	types.h	/^typedef uint pde_t;$/;"	t	typeref:typename:uint
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	typeref:typename:int
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	typeref:typename:int	file:
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc	typeref:typename:pde_t *
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	typeref:typename:uint
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	typeref:typename:uint	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	typeref:typename:uint	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	typeref:typename:void *
picinit	picirq.c	/^picinit(void)$/;"	f	typeref:typename:void
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc	typeref:typename:int
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock	typeref:typename:int
pinit	proc.c	/^pinit(void)$/;"	f	typeref:typename:void
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:pipe *
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f	typeref:typename:void
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	typeref:typename:int
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f	typeref:typename:void
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
popcli	spinlock.c	/^popcli(void)$/;"	f	typeref:typename:void
preempt	usertests.c	/^preempt(void)$/;"	f	typeref:typename:void
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf *
print	Makefile	/^print: xv6.pdf$/;"	t
printf	forktest.c	/^printf(int fd, const char *s, ...)$/;"	f	typeref:typename:void
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f	typeref:typename:void
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	typeref:typename:void	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	typeref:typename:void	file:
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon156e3e2a0108	typeref:struct:proc[]	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:proc *
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f	typeref:typename:void
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	typeref:typename:uchar[20]
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon156e3e2a0108
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t	typeref:typename:uint
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anonf5a2dce30108	typeref:union:header *	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f	typeref:typename:void
putc	printf.c	/^putc(int fd, char c)$/;"	f	typeref:typename:void	file:
qemu	Makefile	/^qemu: fs.img xv6.img$/;"	t
qemu-gdb	Makefile	/^qemu-gdb: fs.img xv6.img .gdbinit$/;"	t
qemu-memfs	Makefile	/^qemu-memfs: xv6memfs.img$/;"	t
qemu-nox	Makefile	/^qemu-nox: fs.img xv6.img$/;"	t
qemu-nox-gdb	Makefile	/^qemu-nox-gdb: fs.img xv6.img .gdbinit$/;"	t
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf *
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
rand	usertests.c	/^rand()$/;"	f	typeref:typename:unsigned int
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v	typeref:typename:unsigned long
rcr2	x86.h	/^rcr2(void)$/;"	f	typeref:typename:uint
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
read_head	log.c	/^read_head(void)$/;"	f	typeref:typename:void	file:
readable	file.h	/^  char readable;$/;"	m	struct:file	typeref:typename:char
readeflags	x86.h	/^readeflags(void)$/;"	f	typeref:typename:uint
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f	typeref:typename:int
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	typeref:typename:void
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f	typeref:typename:void
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f	typeref:typename:void
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	typeref:typename:void	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	typeref:struct:cmd *
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	typeref:typename:int
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	typeref:typename:int
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf	typeref:typename:uint
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	typeref:typename:uint	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f	typeref:typename:void
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	typeref:typename:uchar
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	typeref:typename:uchar[3]
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	typeref:typename:uchar[8]
right	runoff.spec	/^right: proc.c   # VERY important$/;"	t
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
rmdot	usertests.c	/^rmdot(void)$/;"	f	typeref:typename:void
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	typeref:typename:void
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	typeref:typename:uint:1
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	typeref:typename:uint:3
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f	typeref:typename:void
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	typeref:typename:uint:1
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	typeref:typename:uint:1
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anonf5a2dce30108	file:
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f	typeref:typename:void
sched	proc.c	/^sched(void)$/;"	f	typeref:typename:void
scheduler	proc.c	/^scheduler(void)$/;"	f	typeref:typename:void
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:context *
second	date.h	/^  uint second;$/;"	m	struct:rtcdate	typeref:typename:uint
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f	typeref:typename:void
setupkvm	vm.c	/^setupkvm(void)$/;"	f	typeref:typename:pde_t *
sharedfd	usertests.c	/^sharedfd(void)$/;"	f	typeref:typename:void
sheet1	runoff.spec	/^sheet1: left$/;"	t
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v	typeref:typename:uchar[256]
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v	typeref:typename:uchar[256]
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	typeref:typename:uint
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	typeref:typename:ushort
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	typeref:typename:uchar[4]
size	file.h	/^  uint size;$/;"	m	struct:inode	typeref:typename:uint
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	typeref:typename:uint
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	typeref:typename:uint
size	log.c	/^  int size;$/;"	m	struct:log	typeref:typename:int	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	typeref:typename:uint
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anonf5a2dce30108	typeref:typename:uint	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	typeref:typename:char *	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	typeref:typename:void
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	typeref:typename:uchar
spin	bootasm.S	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	typeref:typename:ushort
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	typeref:typename:ushort
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	typeref:typename:ushort
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	typeref:typename:ushort
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	typeref:typename:ushort
start	bootasm.S	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	typeref:typename:int	file:
start32	bootasm.S	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu	typeref:typename:volatile uint
startothers	main.c	/^startothers(void)$/;"	f	typeref:typename:void	file:
stat	mkfs.c	/^#define stat /;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f	typeref:typename:int
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:procstate
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	typeref:typename:void
static_assert	mkfs.c	/^#define static_assert(/;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v	typeref:typename:int
sti	x86.h	/^sti(void)$/;"	f	typeref:typename:void
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f	typeref:typename:char *
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	typeref:typename:int
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f	typeref:typename:char *
strlen	string.c	/^strlen(const char *s)$/;"	f	typeref:typename:int
strlen	ulib.c	/^strlen(const char *s)$/;"	f	typeref:typename:uint
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	typeref:typename:int
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
subdir	usertests.c	/^subdir(void)$/;"	f	typeref:typename:void
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	typeref:typename:uchar	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f	typeref:typename:void
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f	typeref:typename:void
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v	typeref:typename:char[]
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f	typeref:typename:int
sys_close	sysfile.c	/^sys_close(void)$/;"	f	typeref:typename:int
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f	typeref:typename:int
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f	typeref:typename:int
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f	typeref:typename:int
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f	typeref:typename:int
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f	typeref:typename:int
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f	typeref:typename:int
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f	typeref:typename:int
sys_link	sysfile.c	/^sys_link(void)$/;"	f	typeref:typename:int
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f	typeref:typename:int
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f	typeref:typename:int
sys_open	sysfile.c	/^sys_open(void)$/;"	f	typeref:typename:int
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f	typeref:typename:int
sys_read	sysfile.c	/^sys_read(void)$/;"	f	typeref:typename:int
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f	typeref:typename:int
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f	typeref:typename:int
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f	typeref:typename:int
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f	typeref:typename:int
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f	typeref:typename:int
sys_write	sysfile.c	/^sys_write(void)$/;"	f	typeref:typename:int
syscall	syscall.c	/^syscall(void)$/;"	f	typeref:typename:void
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	typeref:typename:int (* [])(void)	file:
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc	typeref:typename:uint
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	typeref:typename:ushort
tags	Makefile	/^tags: $(OBJS) entryother.S _init$/;"	t
tar	Makefile	/^tar:$/;"	t
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:trapframe *
ticks	trap.c	/^uint ticks;$/;"	v	typeref:typename:uint
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v	typeref:typename:uchar[256]
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f	typeref:typename:void
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	typeref:typename:uint
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f	typeref:typename:void
type	elf.h	/^  uint type;$/;"	m	struct:proghdr	typeref:typename:uint
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	typeref:typename:ushort
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anonfd762ebb0103
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	typeref:typename:short
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	typeref:typename:short
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc	typeref:typename:uint:4
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	typeref:typename:uint:4
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	typeref:typename:uchar
type	sh.c	/^  int type;$/;"	m	struct:backcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	typeref:typename:int	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	typeref:typename:short
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	typeref:typename:int	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	typeref:typename:int	file:
uartinit	uart.c	/^uartinit(void)$/;"	f	typeref:typename:void
uartintr	uart.c	/^uartintr(void)$/;"	f	typeref:typename:void
uartputc	uart.c	/^uartputc(int c)$/;"	f	typeref:typename:void
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t	typeref:typename:unsigned char
uint	types.h	/^typedef unsigned int   uint;$/;"	t	typeref:typename:unsigned int
uio	usertests.c	/^uio()$/;"	f	typeref:typename:void
uninit	usertests.c	/^char uninit[10000];$/;"	v	typeref:typename:char[10000]
unlinkread	usertests.c	/^unlinkread(void)$/;"	f	typeref:typename:void
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon69d64d0c0108	typeref:typename:int	file:
userinit	proc.c	/^userinit(void)$/;"	f	typeref:typename:void
ushort	types.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:char *
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr	typeref:typename:uint
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode	typeref:typename:int
validateint	usertests.c	/^validateint(int *p)$/;"	f	typeref:typename:void
validatetest	usertests.c	/^validatetest(void)$/;"	f	typeref:typename:void
vectors.S	Makefile	/^vectors.S: vectors.pl$/;"	t
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	typeref:typename:uint
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	typeref:typename:uchar
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	typeref:typename:void *	file:
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
wait	proc.c	/^wait(void)$/;"	f	typeref:typename:int
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f	typeref:typename:void
wakeup	proc.c	/^wakeup(void *chan)$/;"	f	typeref:typename:void
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	typeref:typename:void	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	typeref:typename:pte_t *	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f	typeref:typename:void
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v	typeref:typename:char[]
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
writable	file.h	/^  char writable;$/;"	m	struct:file	typeref:typename:char
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
write_head	log.c	/^write_head(void)$/;"	f	typeref:typename:void	file:
write_log	log.c	/^write_log(void)$/;"	f	typeref:typename:void	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f	typeref:typename:int
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
writetest	usertests.c	/^writetest(void)$/;"	f	typeref:typename:void
writetest1	usertests.c	/^writetest1(void)$/;"	f	typeref:typename:void
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	typeref:typename:void
x	umalloc.c	/^  Align x;$/;"	m	union:header	typeref:typename:Align	file:
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	typeref:typename:uchar
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f	typeref:typename:uint
xint	mkfs.c	/^xint(uint x)$/;"	f	typeref:typename:uint
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	typeref:typename:ushort
xshort	mkfs.c	/^xshort(ushort x)$/;"	f	typeref:typename:ushort
xv6.img	Makefile	/^xv6.img: bootblock kernel$/;"	t
xv6.pdf	Makefile	/^xv6.pdf: $(PRINT)$/;"	t
xv6memfs.img	Makefile	/^xv6memfs.img: bootblock kernelmemfs$/;"	t
year	date.h	/^  uint year;$/;"	m	struct:rtcdate	typeref:typename:uint
yield	proc.c	/^yield(void)$/;"	f	typeref:typename:void
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v	typeref:typename:char[]
